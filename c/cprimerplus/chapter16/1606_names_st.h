/**
 * #include
 * 预处理器发现#include指令时，会查看后面的文件名并把文件的内容包含到当前文件中
 * 即替换源文件中的#include指令
 * 相当于把被包含文件的全部内容输入到源文件#include指令所在的位置
 * #include <stdio.h> 查找系统目录
 * #include "hot.h" 查找当前工作目录
 * #include "/usr/biff/p.h" 查找/usr/biff目录
 * UNIX中，使用双引号意味着先查找本地目录，但是具体查找哪个目录取决于编译器的设定
 * 	有些编译器会搜索源代码文件所在的目录
 * 	有些编译器会搜索当前的工作目录
 * 	有些编译器会搜索项目文件所在的目录
 * ANSI C 不为文件提供统一的目录模型，因为不同计算机所用的系统不同
 * 一般命名文件的方法因系统而异，但是尖括号和双引号的规则于系统无关
 *
 * C语言习惯用.h后缀表示头文件，这些文件包含需要放在程序顶部的信息
 * 头文件经常包含一些预处理器指令。系统提供一些头文件 stdio.h等，也可以自定义头文件
 *
 * 包含一个大型头文件不一定显著增加程序的大小
 * 在大部分情况下，头文件的内容是编译器生成最终代码时所需的信息，而不是添加到最终代码中的材料
 *
 * 浏览任何一个标准头文件，都可以了解头文件的基本信息
 * 明示常量---例如stdio.h中定义的EOF,NULL,BUFSIZE（标准I/O缓冲区大小）
 * 宏函数---getc(stdin)通常用getchar()定义，而getc()经常用于定义较复杂的宏，
 * 	头文件ctype.h通常包含ctype系列函数的宏定义
 * 函数声明--- string.h (一些旧系统中是strings.h),包含字符串函数系列的函数声明
 * 	ANSI C和后面的标准中，函数声明都是函数原型形式
 * 结构模板定义---标准I/O函数使用FIFE结构，该结构中包含了文件和与文件缓冲区相关的信息，FILE结构在头文件stdio.h中
 * 类型定义---标准I/O函数使用指向FILE的指针作为参数，通常stdio.h用#define 或typedef把FILE定义为指向结构的指针
 * 	类似地size_t和time_t类型也定义在头文件中
 * 可以使用头文件声明外部变量供其他文件文件共享
 * 可以在包含这些函数声明的源代码文件定义一个文件作用域的外部链接变量
 * int status =0;  该变量具有文件作用域，在源代码文件
 * 可以在与源代码文件相关联的头文件中进行引用式声明
 * extern int status; 在头文件中，这行代码会出现在包含了该头文件的文件中，这样使用该系列函数的文件都能使用这个变量
 * 虽然源代码文件中包含该头文件后也包含了该声明，但是只要声明的类型一致，在一个文件中同时使用定义式声明和引用式声明没问题
 *
 * 需要包含头文件的另一种情况
 * 使用具有文件作用域、内部链接、const限定符的变量或数组
 * const防止值被意外修改
 * static意味着每个包含该头文件的文件都获得一份副本，因此不需要在一个文件中进行定义式声明，在其他文件中进行引用式声明
 *
 *
 *
 * names_st.h -- names_st 结构的头文件
 */
//常量
#include <string.h>
#define SLEN 32
//结构声明
struct names_st
{
	char first[SLEN];
	char last[SLEN];
};
//类型定义
typedef struct names_st names;
//函数原型
void get_names(names*);
void show_names(const names*);
char *s_gets(char *st,int n);
