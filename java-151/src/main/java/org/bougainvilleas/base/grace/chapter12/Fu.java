package org.bougainvilleas.base.grace.chapter12;

/**
 * 150.抛弃7条不良的编码习惯
 * 1）自由格式的代码
 *      应该保持自己的代码风格，即使它是错的，也比没有风格要好
 * 2）不使用抽象的代码
 *      抽象的意义不在于编码，而是在于对业务的理解，接口是对业务宏观的描述，而不是实现代码
 * 3）彰显个性的代码
 *      “最小惊诧原则”（Principle Of Least Surprise简称POLS，或者Principle Of Least Astonishment简称POLA），
 *      其意是说要使用最常见的，而不是最新颖的功能。
 *      在编码时，应寻找最常用的方法来实现，
 *      比如，同样有两个方法都能实现一个算法，选择那个最常用的，而不是那个别人一看就惊呼“哇哦，算法这么牛”的，
 *      让普通人都能看懂的代码才是最简洁的代码
 *      最小惊诧原则也同样适用于UI设计，当操作界面上两个元素冲突或重叠时，首选是那个不让用户感到吃惊的元素
 * 4）死代码
 *      可能是忘记删除的代码，也可能是故意保留的类似“到此一游”的签名代码，
 *      这些代码按照正常的执行逻辑是不可能被执行到，但是在某些未知情况下它就是执行了，此时就会产生严重的影响
 * 5）冗余代码
 * 6）拒绝变化的代码
 *      跟版本进行变化，拒绝懒惰
 * 7）自以为是的代码
 *      接受开源工具，尽量多读源码，少写自己的工具类，天外有天，更多更好的工具等待着你去发掘
 */
public class Fu {

}

