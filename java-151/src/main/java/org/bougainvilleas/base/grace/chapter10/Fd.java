package org.bougainvilleas.base.grace.chapter10;

/**
 * 134.推荐使用“望闻问切”的方式诊断性能
 *
 * 性能诊断遵循“望闻问切”，不可过度急躁
 *
 * Java的性能诊断分为此四个过程
 * 1）望
 *   观察性能问题的症状，性能问题从表象上来看可以分为两类
 *     1)不可（或很难）重现的偶发性问题
 *       比如线程阻塞，在某种特殊条件下，多个线程访问共享资源时会被阻塞，但不会形成死锁，这种情况很难去重现
 *       不要为了重现问题而花费大量的时间
 *     2)可重现的性能问题：重现观察
 * 2）闻
 *    在性能优化上的“闻”则是关注项目被动产生的信息，其中包括：
 *      1）项目组的技术能力（主要取决于技术经理的技术能力）
 *      2）文化氛围
 *      3）群体的习惯和习性，以及他们专注和擅长的领域等
 *    如果项目组的技术能力很强，有资深的数据库专家，有顶尖的架构师，也有首席程序员，
 *    那性能问题产生的根源就应该定位在无意识的代码缺陷上
 *    如果项目组已经习惯了某一个框架，而且也习惯了框架的种种约束，那性能的根源就可能是有人越过了框架的协约
 *    闻”并不是主动地去了解，而是由技术（人或应用）自行挥发出的“味道”，需要我们要敏锐地抓住，这可能会对性能分析有非常大的帮助
 * 3）问
 *    是与技术人员（缔造者）和业务人员（使用者）一起探讨该问题，了解性能问题的历史状况，了解“慢”产生的前因后果
 *    对于技术人员，我们就要从技术角度来询问性能问题了，而且由于技术人员对系统了如指掌，可能会“无意识”地回避问题，我们应该有技巧地处理这类问题，例如可以这样来询问技术人员
 *      1)系统日志是否记录了缓慢信息，是否可以回放缓慢交易？
 *      2)缓慢时系统的CPU、内存、I/O如何？
 *      3)高峰期和低谷时业务并发数量、并发交易种类、连接池的数量、数据的连接数量如何？
 *      4)最早接到用户投诉是什么时候，是如何处理的，优化后如何？
 *      5)数据量的增长幅度如何，是否有历史数据处理策略？
 *      6)系统是否有不稳定的情况，是否出现过宕机，是否产生过javacore文件？
 *      7)最后一次变更是何时，变更的内容是哪些，变更后是否出现过性能问题？
 *      8)操作系统、网络、存储、应用软件等环境是否发生过改变？
 * 4）切
 *    要我们接触真实的系统数据，需要去看设计，看代码，看日志，看系统环境，然后是思考分析，最后给出结论。
 *    在这一环节中，需要注意两点：
 *       一是所有的非一手资料（如报告、非系统信息）都不是100%可信的，
 *       二是测试环境毕竟是测试环境，它只是证明假设的辅助工具，并不能证明方法或策略的正确性
 * 性能优化是一个漫长的工作，
 * 特别是对于偶发性的性能问题，
 * 不要期望找到“名医”立刻就能见效，这是不现实的，
 * 深入思考，寻根探源，最终必然能找到根源所在。
 * 中医上有一句话“病来如山倒，病去如抽丝”，系统诊断也应该这样一个过程，切忌急躁
 */
public class Fd {
}

