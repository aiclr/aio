package org.bougainvilleas.base.grace.chapter12;

/**
 * 151.以技术员自律而不是工人
 * 1）熟悉工具
 * 2）使用IDE
 * 3）坚持编码
 * 4）编码前思考
 *      设计之后编码
 * 5）坚持重构
 *      不要相信一次就能写出优秀的代码，这是不现实的，任何优秀的代码、算法都是经过多次重构磨练的，坚信自己的下一个版本或代码更优秀
 * 6）多写文档
 *      写注释、写说明、写报告都是对代码或项目的回顾和总结，不仅仅是为了后续的参与人员，同时也是为了整理自己头脑中混乱的思维
 * 7）保持程序版本的简单性
 *      一个项目不要保持多个版本，即使有分支也必须定义出项目合并的条件，或者时间约束，或者目标约束，不可任由版本扩散
 * 8）做好备份
 *      把代码拷贝到不同的主机上备份是一个好习惯---自动备份
 * 9）做单元测试
 * 10）不要重复发明轮子
 * 11）不要拷贝
 *      问问自己“我在做什么？拷贝是否是唯一能做的？“。不要做搬运工，不要做拷贝工，要做技术工
 * 12）让代码充满灵性
 *      为变量、类、方法起个好听的名字是一个不错的主意，为代码增加必要的注释也是很好的办法，“One Line”能解决一个上百行代码的问题，也是一个优秀的实现。
 * 13）测试自动化
 *      不管是性能测试、单元测试，还是功能测试，想尽办法让它自动化，不要在测试之前手动配置或触发条件，这不够人性化，也同时让代码“汗颜”—本是用来自动执行的，但却被手动设置了条件
 * 14）做压力测试
 * 15）“剽窃”不可耻
 *      多看开源代码
 * 16）坚持向敏捷学习
 * 17）重里更重面
 *      UI（User Interface）是“面”，Java程序是“里”，客户首先感受到的是“面”，然后才是“里”，要想获得良好的第一印象，那就需要有一个简洁、清晰、便捷的UI，即使“金玉其外败絮其中”，我们也可以继续重构
 * 18）分享
 *      暴露出自己的Bug，知耻而后勇
 * 19）刨根问底
 *      知其然更要知其所以然
 * 20）横向扩展
 *      扩展知识面
 *      Java要运行在JVM、操作系统上，
 *      同时还要与硬件、网络、存储交互，
 *      另外要遵循诸如FTP、SMTP、HTTP等协议，
 *      还要实现Web Service、RMI、XML-RPC等接口
 */
public class Fv {

}

