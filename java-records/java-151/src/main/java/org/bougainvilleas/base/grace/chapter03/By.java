package org.bougainvilleas.base.grace.chapter03;

/**
 * 51.不要主动进行垃圾回收
 * 在Java 1.1的年代里，经常会看到System.gc这样的调用—主动对垃圾进行回收。
 * 不过，在Java知识深入人心后，这样的代码就逐渐销声匿迹了—这是好现象，
 * 因为主动进行垃圾回收是一个非常危险的动作
 *
 * System.gc要停止所有的响应（Stop the world），才能检查内存中是否有可回收的对象，
 * 这对一个应用系统来说风险极大，如果是一个Web应用，所有的请求都会暂停，
 * 等待垃圾回收器执行完毕，若此时堆内存（Heap）中的对象少的话则还可以接受，
 * 一旦对象较多（现在的Web项目是越做越大，框架、工具也越来越多，加载到内存中的对象当然也就更多了），
 * 那这个过程就非常耗时了，可能0.01秒，也可能是1秒，甚至是20秒，这就会严重影响到业务的正常运行
 *
 * 这样一段代码：new String("abc")，该对象没有任何引用，对JVM来说就是个垃圾对象。
 * JVM的垃圾回收器线程第一次扫描（扫描时间不确定，在系统不繁忙的时候执行）时把它贴上一个标签，说“你是可以被回收的”，
 * 第二次扫描时才真正地回收该对象，并释放内存空间，
 * 如果我们直接调用System.gc，则是在说“嗨，你，那个垃圾回收器过来检查一下有没有垃圾对象，回收一下”。
 * 程序主动招来了垃圾回收器，这意味着正在运行着的系统要让出资源，以供垃圾回收器执行，
 * 它会把所有的对象都检查一遍，然后处理掉那些垃圾对象。注意，是检查每个对象。
 * 不要调用System.gc，即使经常出现内存溢出也不要调用，
 * 内存溢出是可分析的，是可以查找出原因的，GC可不是一个好解决方案
 */
public class By {}
